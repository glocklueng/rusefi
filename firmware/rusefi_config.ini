
! this file defines the format of rusEfi persistent configuration structure
! this file is processed by ../java_tools/config_definition.jar tool
!
! comments start with '#'
!
! each field is declared as
! type;name;comment


struct cranking_parameters_s
float;baseCrankingFuel;
int16_t;crankingRpm;This value controls what RPM values we consider 'cranking' (any RPM below 'crankingRpm')\nAnything above 'crankingRpm' would be 'running'
end_struct


struct air_pressure_sensor_config_s
          float;customValueAt0;kPa value at zero volts
float;customValueAt5;kPa value at 5 volts
air_pressure_sensor_type_e;sensorType;
adc_channel_e;hwChannel
end_struct


#define MAP_ANGLE_SIZE 8
#define MAP_WINDOW_SIZE 8

struct MAP_sensor_config_s
array float MAP_ANGLE_SIZE;samplingAngleBins
array float MAP_ANGLE_SIZE;samplingAngle;@brief MAP averaging sampling start angle, by RPM
end_struct

struct ThermistorConf @brief Thermistor curve parameters
float;tempC_1;these values are in Celcuus
float;tempC_2
float;tempC_3
float;resistance_1
float;resistance_2
float;resistance_3

	float;bias_resistor;

	float;s_h_a;
	float;s_h_b;
	float;s_h_c;


end_struct



struct engine_configuration_s



engine_type_e;engineType;http://rusefi.com/wiki/index.php?title=Manual:Engine_Type

int;headerMagicValue;this magic number is used to make sure that what we read from Flash is in fact some configuration

#define CLT_CURVE_SIZE 16
#define IAT_CURVE_SIZE 16
#define VBAT_INJECTOR_CURVE_SIZE 8

#define   IGN_LOAD_COUNT   16
#define    IGN_RPM_COUNT			 16

array float VBAT_INJECTOR_CURVE_SIZE;battInjectorLagCorrBins;
array float VBAT_INJECTOR_CURVE_SIZE;battInjectorLagCorr;

array float CLT_CURVE_SIZE;cltFuelCorrBins;
array float CLT_CURVE_SIZE;cltFuelCorr;

array float IAT_CURVE_SIZE;iatFuelCorrBins;
array float IAT_CURVE_SIZE;iatFuelCorr;

int16_t;directSelfStimulation;Should the trigger emulator push data right into trigger input, eliminating the need for physical jumper wires?\nPS: Funny name, right? :)\ntodo: make this a bit on some bit field

int16_t;tpsMin;todo: extract these two fields into a structure\ntodo: we need two sets of TPS parameters - modern ETBs have to sensors
int16_t;tpsMax;tpsMax value as 10 bit ADC value. Not Voltage!

int16_t;analogChartMode;

int16_t;tpsErrorLowValue;todo: finish implementation. These values are used for TPS disconnect detection
int16_t;tpsErrorHighValue

float;primingSquirtDurationMs
int;engineCycle;360 for two-stroke\n720 for four-stroke

cranking_parameters_s;crankingSettings
MAP_sensor_config_s;map;@see hasMapSensor\n@see isMapAveragingEnabled


end_struct