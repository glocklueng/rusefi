package com.rusefi;

import java.io.*;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

/**
 * (c) Andrey Belomutskiy
 * 1/12/15
 */
public class ConfigDefinition {
    private static final String INPUT_FILE_NAME = "rusefi_config.ini";
    private static final String TS_FILE_NAME = "rusefi.ini";
    private static final String STRUCT_NO_PREFIX = "struct_no_prefix ";
    private static final String STRUCT = "struct ";
    public static final String END_STRUCT = "end_struct";
    public static final String CUSTOM = "custom";
    public static final String BIT = "bit";
    public static final String CONFIG_DEFINITION_START = "CONFIG_DEFINITION_START";
    public static final String CONFIG_DEFINITION_END = "CONFIG_DEFINITION_END";
    private static Map<String, Integer> values = new HashMap<>();
    private static int totalTsSize;

    private static Stack<ConfigStructure> stack = new Stack<>();
    public static Map<String, ConfigStructure> structures = new HashMap<>();
    public static Map<String, String> tsCustomLine = new HashMap<>();
    public static Map<String, Integer> tsCustomSize = new HashMap<>();

    public static void main(String[] args) throws IOException {
        if (args.length != 3) {
            System.out.println("Please specify path to '" + INPUT_FILE_NAME + "' file, path to " + TS_FILE_NAME +
                    " and destination folder");
            return;
        }

        String path = args[0];
        String tsPath = args[1];
        String dest = args[2];
        String fullFileName = path + File.separator + INPUT_FILE_NAME;
        System.out.println("Reading from " + fullFileName);
        String destCHeader = dest + File.separator + "engine_configuration_generated_structures.h";
        System.out.println("Writing C header to " + destCHeader);

        TsFileContent tsContent = readTsFile(tsPath);
        System.out.println("Got " + tsContent.getPrefix().length() + "/" + tsContent.getPostfix().length() + " of " + TS_FILE_NAME);

        BufferedWriter cHeader = new BufferedWriter(new FileWriter(destCHeader));

        BufferedReader br = new BufferedReader(new FileReader(fullFileName));

        CharArrayWriter tunerStudioWriter = new CharArrayWriter();
        processFile(br, cHeader, tunerStudioWriter);

        BufferedWriter tsHeader = new BufferedWriter(new FileWriter(TS_FILE_NAME));
        tsHeader.write(tsContent.getPrefix());

        tsHeader.write("; " + CONFIG_DEFINITION_START + "\r\n");
        tsHeader.write("pageSize            = " + totalTsSize + "\r\n");
        tsHeader.write("page = 1\r\n");
        tsHeader.write(tunerStudioWriter.toString());
        tsHeader.write("; " + CONFIG_DEFINITION_END + "\r\n");
        tsHeader.write(tsContent.getPostfix());

        if (!stack.isEmpty())
            throw new IllegalStateException("Unclosed structure: " + stack.peek().name);

        cHeader.close();
        tsHeader.close();
    }

    private static TsFileContent readTsFile(String tsPath) throws IOException {
        BufferedReader r = new BufferedReader(new FileReader(tsPath + File.separator + TS_FILE_NAME));

        StringBuilder prefix = new StringBuilder();
        StringBuilder postfix = new StringBuilder();

        boolean isBeforeStartTag = true;
        boolean isAfterEndTag = false;
        String line;
        while ((line = r.readLine()) != null) {
            if (line.contains(CONFIG_DEFINITION_START)) {
                isBeforeStartTag = false;
                continue;
            }
            if (line.contains(CONFIG_DEFINITION_END)) {
                isAfterEndTag = true;
                continue;
            }

            if (isBeforeStartTag)
                prefix.append(line + "\r\n");

            if (isAfterEndTag)
                postfix.append(line + "\r\n");
        }
        return new TsFileContent(prefix.toString(), postfix.toString());
    }

    private static void processFile(BufferedReader br, BufferedWriter cHeader, Writer tsHeader) throws IOException {
        String line;

        String message = "// this section was generated by config_definition.jar on " + new Date() + "\r\n";
        cHeader.write(message);
        cHeader.write("// begin\r\n");
        cHeader.write("#include \"rusefi_types.h\"\n");

        while ((line = br.readLine()) != null) {
            line = line.trim();
            line = line.replaceAll("\\s+", " ");
            /**
             * we should ignore empty lines and comments
             */
            if (line.length() == 0 || line.startsWith("!"))
                continue;

            if (line.startsWith(STRUCT)) {
                handleStartStructure(line.substring(STRUCT.length()), true);
            } else if (line.startsWith(STRUCT_NO_PREFIX)) {
                handleStartStructure(line.substring(STRUCT_NO_PREFIX.length()), false);
            } else if (line.startsWith(END_STRUCT)) {
                handleEndStruct(cHeader, tsHeader);
            } else if (line.startsWith(BIT)) {
                line = line.substring(BIT.length() + 1).trim();

                String bitName;
                String comment;
                if (!line.contains(";")) {
                    bitName = line;
                    comment = "";
                } else {
                    int index = line.indexOf(";");
                    bitName = line.substring(0, index);
                    comment = line.substring(index + 1);
                }

                ConfigField bitField = new ConfigField(bitName, comment, true, null, null, 0, null, false);
                stack.peek().addBoth(bitField);

            } else if (line.startsWith(CUSTOM + " ") || line.startsWith(CUSTOM + "\t")) {
                line = line.substring(CUSTOM.length() + 1).trim();
                int index = line.indexOf(' ');
                String name = line.substring(0, index);
                line = line.substring(index).trim();
                index = line.indexOf(' ');
                String customSize = line.substring(0, index);

                String tunerStudioLine = line.substring(index).trim();
                int size;
                try {
                    size = Integer.parseInt(customSize);
                } catch (NumberFormatException e) {
                    throw new IllegalStateException("Size in " + line);
                }
                tsCustomSize.put(name, size);
                tsCustomLine.put(name, tunerStudioLine);

            } else {
                processLine(line);
            }
        }
        cHeader.write("// end\r\n");
        cHeader.write(message);
    }

    private static void handleStartStructure(String line, boolean withPrefix) {
        String name;
        String comment;
        if (line.contains(" ")) {
            int index = line.indexOf(' ');
            name = line.substring(0, index);
            comment = line.substring(index + 1).trim();
        } else {
            name = line;
            comment = null;
        }
        ConfigStructure structure = new ConfigStructure(name, comment, withPrefix);
        stack.push(structure);
        System.out.println("Starting structure " + structure.name);
    }

    private static void handleEndStruct(Writer cHeader, Writer tsHeader) throws IOException {
        if (stack.isEmpty())
            throw new IllegalStateException("Unexpected end_struct");
        ConfigStructure structure = stack.pop();
        System.out.println("Ending structure " + structure.name);
        structure.addAlignmentFill();

        ConfigDefinition.structures.put(structure.name, structure);

        structure.headerWrite(cHeader);

        if (stack.isEmpty()) {
            totalTsSize = structure.writeTunerStudio("", tsHeader, 0);
            tsHeader.write("; total TS size = " + totalTsSize + "\r\n");
        }
    }

    private static void processLine(String line) throws IOException {
        /**
         * for example
         * #define CLT_CURVE_SIZE 16
         */
        if (line.startsWith("#define")) {
            processDefine(line);
            return;
        }

        ConfigField cf = ConfigField.parse(line);
        if (cf == null)
            throw new IllegalStateException("Cannot parse line [" + line + "]");

        if (stack.isEmpty())
            throw new IllegalStateException(cf.name + ": Not enclosed in a struct");
        ConfigStructure structure = stack.peek();

        if (cf.isIterate) {
            structure.addC(cf);
            for (int i = 1; i <= cf.arraySize; i++) {
                ConfigField element = new ConfigField(cf.name + i, cf.comment, false, null,
                        cf.type, 1, cf.tsInfo, false);
                structure.addTs(element);
            }
        } else {
            structure.addBoth(cf);
        }
    }

    public static String getComment(String comment, int currentOffset) {
        return "\t/**\r\n" + packComment(comment, "\t") + "\t * offset " + currentOffset + "\r\n\t */\r\n";
    }

    public static String packComment(String comment, String linePrefix) {
        if (comment == null)
            return "";
        if (comment.trim().isEmpty())
            return "";
        String result = "";
        for (String line : comment.split("\\\\n")) {
            result += linePrefix + " * " + line + "\r\n";
        }
        return result;
    }

    public static int getSize(String s) {
        if (values.containsKey(s))
            return values.get(s);
        return Integer.parseInt(s);
    }

    private static void processDefine(String line) {
        String a[] = line.split(" ");
        String key = a[1];
        int value = Integer.parseInt(a[2]);
        System.out.println("k [" + key + "] value: " + value);
        values.put(key, value);
    }
}
